#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

from __future__ import print_function, unicode_literals

import argcomplete
import argparse
import git
import os
import shutil
import sys

from clint.textui.colored import yellow, red, green


def parse():
    parser = argparse.ArgumentParser(description='')
    commands = parser.add_subparsers()
    commands.add_parser('install').set_defaults(command='install')

    update = commands.add_parser('update')
    update.set_defaults(command='update')
    update.add_argument('version', default='master')

    commands.add_parser('uninstall').set_defaults(command='uninstall')
    commands.add_parser('activate').set_defaults(command='activate')
    commands.add_parser('deactivate').set_defaults(command='deactivate')

    argcomplete.autocomplete(parser)
    return parser.parse_args()

args = parse()
repo = git.Repo()
root = repo.working_dir
remote = 'git@github.com:whiskeysierra/git-hooks.git'
local = '.git-hooks'

subtree = os.path.join(root, local)
dispatcher = os.path.join(subtree, 'dispatcher.py')
manage = os.path.join(subtree, 'manage.py')
hooks_directory = os.path.join(root, '.git', 'hooks')


def log(s):
    sys.stdout.write(s + ' ')
    sys.stdout.flush()


def log_result(r='done', color=green):
    sys.stdout.write('[%s]' % color(r) + '\n')


def relativize(path):
    return os.path.relpath(path, root)


def install():
    if os.path.exists(subtree):
        raise IOError("%s already exists" % local)

    log('Installing git-hooks into %s' % local)
    repo.git.subtree('add', '--prefix', local, '--squash', remote, 'master')
    log_result()

    config = repo.config_writer(config_level='repository')

    log("Adding alias 'hooks' to this repository")
    if config.has_option('alias', 'hooks'):
        log_result('existed', color=yellow)
    else:
        config.set('alias', 'hooks', '!.git-hooks/git-hooks')
        log_result()


def update():
    if not os.path.exists(subtree):
        raise IOError("%s does not exists" % local)

    log("Updating '%s' with %s" % (local, remote))
    repo.git.subtree('pull', '--prefix', local, '--squash', remote, 'master')
    log_result()


def uninstall():
    if not os.path.exists(subtree):
        raise IOError("%s does not exists", local)

    log('Removing git-hooks from %s' % local)
    shutil.rmtree(subtree)
    log_result()

    config = repo.config_writer(config_level='repository')

    log("Adding alias 'hooks' to this repository")
    if config.has_option('alias', 'hooks'):
        config.remove_option('alias', 'hooks')
        log_result()
    else:
        log_result('missing', color=yellow)


def activate():
    # TODO check if installed
    repo.git.hooks('link')


def deactivate():
    # TODO check if installed
    repo.git.hooks('unlink')


actions = {
    'install': install,
    'update': update,
    'uninstall': uninstall,
    'activate': activate,
    'deactivate': deactivate,
}


def unknown():
    raise RuntimeError("Unknown command '%s'" % args.command)


action = actions.get(args.command, unknown)


def on_error(message):
    sys.stderr.write(str(message) + '\n')
    sys.exit(1)


try:
    action()
except git.exc.GitCommandError, e:
    on_error(e.stderr)
except Exception, e:
    on_error(e)